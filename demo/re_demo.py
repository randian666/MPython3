#!/usr/bin/env python3
import re
'''
正则表达式
在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格
.可以匹配任意字符
用*表示任意个字符（包括0个）
用+表示至少一个字符，用?表示0个或1个字符
用{n}表示n个字符，用{n,m}表示n-m个字符
\d{3}表示匹配3个数字   \d{3,8}表示3-8个数字
要做更精确地匹配，可以用[]表示范围
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；

[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；

[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；

[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）
A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。

^表示行的开头，^\d表示必须以数字开头。

$表示行的结束，\d$表示必须以数字结束

py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了
'''
str='101-23568678'

#match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
if re.match(r'^\d{3}\-\d{3,8}$',str):
    print("验证通过")
else:
    print("验证失败")

#切分字符串
print(re.split(r'\s+','A  B C')) #根据至少一个空格进行分割
print(re.split(r'[\s\,]+','A,B C,,D')) #根据至少一个空格或者逗号进行分割
print(re.split(r'[\s\,\;]+','A,,B;; C  D'))


#分组
# group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串
t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$', t)
print(m.groups())
print(m.group(0))
print(m.group(1))
print(m.group(2))
print(m.group(3))

# 贪婪匹配
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配
print(re.match(r'^(\d+?)(0*)$', '102300').groups())

# 写一个验证Email地址的正则表达式。版本一应该可以验证出类似的Email
print(re.match(r'^([0-9a-zA-Z\.]+)@([0-9a-zA-Z]+).([a-z]{3})$','bill.gates@microsoft.com'))
